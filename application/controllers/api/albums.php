<?php defined ( 'BASEPATH' ) OR exit ( 'No direct script access allowed' );

/**
 * Create = PUT with a new URI
 *          POST to a base URI returning a newly created URI
 * Read   = GET
 * Update = PUT with an existing URI
 * Delete = DELETE
 *
 * Description of Albums
 *
 * Supported methods and URI's:
 *     (Create) (index_post) POST .../api/albums HTTP/1.1
 *     (Create) (id_put)     PUT .../api/albums/id/{number} HTTP/1.1
 *     (Create) (id_post)    POST .../api/albums/id/{number} HTTP/1.1 (Supported for web browsers)
 *     (Read)   (index_get)  GET .../api/albums HTTP/1.1
 *     (Read)   (id_get)     GET .../api/albums/id/{number} HTTP/1.1
 *     (Update) (id_put)     PUT .../api/albums/id/{number} HTTP/1.1
 *
 * @author knautz
 *
 */

/**
 * Apparently the REST_Controller cannot be autoloaded with out a hack to the
 *core components...
 *
 * @todo Try to work in the hack: http://forum.codeigniter.com/thread-59291.html
 *
 */
require_once APPPATH . '/libraries/REST_Controller.php';
require_once APPPATH . '/libraries/Util.php';

// Get the pplication constatnts
require_once APPPATH . 'imageserverapp.php';

class Albums extends REST_Controller
{
    private $utils;

    function __construct()
    {
        // Construct our parent class
        parent::__construct();

        $this->load->model ( _IS_MODEL_ALBUMS_ );
        $this->load->model ( _IS_MODEL_IMAGES_ );
        $this->load->library ( _IS_LIBRARY_IS_EXCEPTION_ );
        $this->load->library ( _IS_LIBRARY_UTIL_ );

        $this->utils = new Util();
    }


    /**************************************************************************\
    |
    | Album Create methods
    |
    | Albums can be created using one of two methods: let the server create
    | the album with default information (index_post) or let the client create
    | the album with their own information (id_get/id_post).
    |
    \**************************************************************************/


    /**
     * POST to a base URI returning a new server created URI.
     *
     * Called with the following HTTP request:
     *     POST .../api/albums HTTP/1.1
     */
    function index_post()
    {
        // Create the new album.
        try
        {
            $album = $this->{_IS_MODEL_ALBUMS_}->newAlbum();
        }
        catch ( IS_Exception $e )
        {
            $this->utils->send_response ( $e, _IS_HTTP_RESPONSECODE_409_ );
        }

        // Success response: 201 Created
        $this->utils->send_response ( $album, _IS_HTTP_RESPONSECODE_201_ );
    }

    /**
     * PUT with a new URI created by the user.
     *
     * Called with the following HTTP request:
     *     PUT .../api/albums/id/{number} HTTP/1.1
     * where {number} is a unique identifier in the DB for this album. The
     * albums unique identifier is generated by the user.
     *
     * @param integer $pId The albums unique id. Album ids must be >= 1 as 0
     * is the default for the models newAlbum() if it is called without a
     * parameter as in index_post().
     */
    function id_put ( $pId=0 )
    {
        $dbgFlag = true;

        // Assume the first entry is the title and the second is th description
        $title = $this->put ( _IS_DATA_TITLE_ );
        if ( !$title )
        {
            // This method may have been called from id_post().
            $title = $this->post ( _IS_DATA_TITLE_ );
        }

        $description = $this->put ( _IS_DATA_DESCRIPTION_ );
        if ( !$description )
        {
            // This method may have been called from id_post().
            $description = $this->post ( _IS_DATA_DESCRIPTION_ );
        }

        $this->utils->debug_msg ( __METHOD__, "*** id_put: put/post parms - title = $title, description = $description", $dbgFlag );

        try
        {
            $albumExists = $this->_album_exists ( $pId, $dbgFlag );
        }
        catch ( Exception $e )
        {
            // getAlbumById() throws the following exceptions
            switch ( $e->getCode() )
            {
                case _IS_ENUM_MISSING_ID_:
                case _IS_ENUM_BAD_ID_:
                    $this->utils->send_response ( $e, _IS_HTTP_RESPONSECODE_400_ );
                    break;

                case _IS_ENUM_DB_SELECT_ERROR_:
                default:
                    $this->utils->send_response ( $e, _IS_HTTP_RESPONSECODE_500_ );
                    break;
            }
        }

        $this->utils->debug_msg ( __METHOD__, "*** id_put: albumExists = $albumExists", $dbgFlag );

        if ( $albumExists )
        {
            $this->utils->debug_msg ( __METHOD__, "*** id_put: Calling model->updateAlbum.", $dbgFlag );

            // Create the new album.
            try
            {
                $album = $this->{_IS_MODEL_ALBUMS_}->updateAlbum ( $pId, $title, $description, $dbgFlag );
            }
            catch ( IS_Exception $e )
            {
                $this->utils->send_response ( $e, _IS_HTTP_RESPONSECODE_409_ );
            }

            // Success response: 201 Created
            $this->utils->send_response ( $album, _IS_HTTP_RESPONSECODE_201_ );
        }
        else
        {
            $this->utils->debug_msg ( __METHOD__, "*** id_put: Calling model->newAlbum.", $dbgFlag );

            // Create the new album.
            try
            {
                $album = $this->{_IS_MODEL_ALBUMS_}->newAlbum ( $pId, $title, $description, $dbgFlag );
            }
            catch ( IS_Exception $e )
            {
                $this->utils->send_response ( $e, _IS_HTTP_RESPONSECODE_409_ );
            }

            // Success response: 201 Created
            $this->utils->send_response ( $album, _IS_HTTP_RESPONSECODE_201_ );
        }
    }

    /**
     * POST with a new URI created by the user.
     *
     * Called with the following HTTP request:
     *     POST .../api/albums/id/{number} HTTP/1.1
     *
     * @see id_put()
     *
     * @param integer $pId
     */
    function id_post ( $pId=0 )
    {
        $this->id_put ( $pId );
    }


    /**************************************************************************\
    |
    | Album Read Methods
    |
    \**************************************************************************/


    /**
     * Retrieve a list of all albums
     *
     * Called with the following HTTP request:
     *     GET .../api/albums HTTP/1.1
     */
    function index_get()
    {
        try
        {
            $albums = $this->{_IS_MODEL_ALBUMS_}->getAlbumsAll();
        }
        catch ( IS_Exception $e )
        {
            $this->utils->send_response ( $e );   // Returns 400 Bad Request
        }

        // Success response: 200 OK
        $this->utils->send_response ( $albums );
    }

    /**
     * GET an album by its identifier.
     *
     * Called with the following URI:
     *     GET .../api/albums/id/{number} HTTP/1.1
     * where {number} is the unique identifier in the DB for this image.
     * @param int $pId
     */
    function id_get ( $pId=0 )
    {
        // Make sure the id is given.  IF the id is not given, try the get header
        if ( !$pId )
        {
            $this->get ( _IS_URI_ID_ );
        }

        // Get the album from the model
        try
        {
            $album = $this->{_IS_MODEL_ALBUMS_}->getAlbumById ( $pId );
        }
        catch ( Exception $e )
        {
            // getAlbumById() throws the following exceptions
            switch ( $e->getCode() )
            {
                case _IS_ENUM_MISSING_ID_:
                case _IS_ENUM_BAD_ID_:
                    $this->utils->send_response ( $e, _IS_HTTP_RESPONSECODE_400_ );
                    break;

                case _IS_ENUM_DB_SELECT_ERROR_:
                default:
                    $this->utils->send_response ( $e, _IS_HTTP_RESPONSECODE_500_ );
                    break;
            }
        }

        // The album was found.
        if ( empty ( $album ) )
        {
            // Since $album is empty, no XML content will be sent back
            $this->utils->send_response( $album, _IS_HTTP_RESPONSECODE_404_ );
        }
        else
        {
            $this->utils->send_response( $album, _IS_HTTP_RESPONSECODE_200_ );
        }
    }


    /**************************************************************************\
    |
    | Album Delete Methods
    |
    \**************************************************************************/


    /**
     * Delete an album identified by its identifier.
     *
     * Called with the following HTTP request:
     *     DELETE .../api/albums/id/{number} HTTP/1.1
     * where {number} is the unique identifier in the DB for this image.
     *
     * @param int $pId
     *
     */
    function id_delete ( $pId )
    {
        // Make sure the id is given.
        if ( !$pId )
        {
            $this->utils->delete ( _IS_URI_ID_ );
        }

        // If we do not have an id at this point, it is an error.
        if ( !$pId )
        {
            $this->utils->send_response
                (
                    array ( _IS_RESPONSE_FIELD_ERROR_ => _IS_EMSG_MISSING_ID_ ),
                    _CF_HTTP_RESPONSECODE_400_
                );
        }

        $this->utils->debug_msg ( __METHOD__, 'id is present. Proceeding...', true );

        // Delete the images from the image table and the file system.
        try
        {
            $this->utils->debug_msg ( __METHOD__, 'Calling model->deleteImagesForAlbumId()...', true );
            $result = $this->{_IS_MODEL_IMAGES_}->deleteImagesForAlbumId ( $pId, true );
        }
        catch ( Exception $e )
        {
            // getAlbumById() throws the following exceptions
            switch ( $e->getCode() )
            {
                case _IS_ENUM_MISSING_ID_:
                case _IS_ENUM_BAD_ID_:
                    $this->utils->send_response ( $e, _IS_HTTP_RESPONSECODE_400_ );
                    break;

                case _IS_ENUM_DB_DELETE_ERROR_:
                default:
                    $this->utils->send_response ( $e, _IS_HTTP_RESPONSECODE_500_ );
                    break;
            }
        }

        $this->utils->debug_msg ( __METHOD__, 'model->deleteImagesForAlbumId() successful.', true );

        // Delete the album from the album table.  This also removes the
        // directory associated with the album.
        try
        {
            $result = $this->{_IS_MODEL_ALBUMS_}->deleteAlbumById ( $pId, true );
        }
        catch ( Exception $e )
        {
            // getAlbumById() throws the following exceptions
            switch ( $e->getCode() )
            {
                case _IS_ENUM_MISSING_ID_:
                case _IS_ENUM_BAD_ID_:
                    $this->utils->send_response ( $e, _IS_HTTP_RESPONSECODE_400_ );
                    break;

                case _IS_ENUM_DB_DELETE_ERROR_:
                default:
                    $this->utils->send_response ( $e, _IS_HTTP_RESPONSECODE_500_ );
                    break;
            }
        }
    }

    /**************************************************************************\
     * Check for the existance of an album.
     * <p>
     * This method searches the database for the existance of the album
     * identified by the provided album identifier. The method returns TRUE if
     * the album exists and FALSE otherwise.
     * <p>
     * @param integer $pId Unique identifier of the album for which existance is
     * being checked.
     * @param boolean $dbgFlag A flag that puts the method into debug mode.
     * @return boolean TRUE if the album exists; FALSE otherwise.
     * @throws Exception If the model throws an exception, the exception is
     * propigated/rethrown.
    \**************************************************************************/
    private function _album_exists ( $pId, $dbgFlag=false )
    {
        // Get the album from the model
        try
        {
            $album = $this->{_IS_MODEL_ALBUMS_}->getAlbumById ( $pId, $dbgFlag );
        }
        catch ( Exception $e )
        {
            // Rethrow
            throw $e;
        }

        // No error
        if ( $album )
        {
            log_message ( 'debug', '*** _album_exists: album = ' . print_r ( $album ) . '. Returning true' );
            return true;
        }
        else
        {
            log_message ( 'debug', '*** _album_exists: album = ' . print_r ( $album ) . '. Returning false' );
            return false;
        }
    }

}

/* End of file albums.php */
/* Location: ImageServer-{version}/application/controllers/albums.php */
